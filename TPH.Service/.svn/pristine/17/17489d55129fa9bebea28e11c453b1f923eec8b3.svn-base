package com.artica.telesalud.tph.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.artica.telesalud.common.service.DAOFactoryInstantiator;
import com.artica.telesalud.tph.concepts.ConceptsCode;
import com.artica.telesalud.tph.dao.LesionadoDAO;
import com.artica.telesalud.tph.dao.PrimerRespondienteDAO;
import com.artica.telesalud.tph.dao.UserDAO;
import com.artica.telesalud.tph.dao.hibernate.HibernateTPHDAOFactory;
import com.artica.telesalud.tph.model.concept.Concept;
import com.artica.telesalud.tph.model.encounter.Encounter;
import com.artica.telesalud.tph.model.evento.Evento;
import com.artica.telesalud.tph.model.evento.Lesionado;
import com.artica.telesalud.tph.model.evento.PrimerRespondiente;
import com.artica.telesalud.tph.model.patient.Patient;
import com.artica.telesalud.tph.model.user.User;

public class LesionadoService {

	private LesionadoDAO lesionadoDAO;
	private PatientService patientService;
	private EncounterService encounterService;
	private EventoService eventoService;
	private PrimerRespondienteDAO primerRespondienteDAO;
	private UserDAO userDAO;
	public Lesionado updateLesionado(Lesionado lesionado)
	{
		return lesionadoDAO.update(lesionado);
	}
	public LesionadoService(String daoClassName, HashMap<String, String> params) {

		lesionadoDAO = DAOFactoryInstantiator.instantiateDaoFactory(
				HibernateTPHDAOFactory.class, daoClassName, params)
				.getLesionadoDAO();

	
		primerRespondienteDAO = DAOFactoryInstantiator.instantiateDaoFactory(
				HibernateTPHDAOFactory.class, daoClassName, params)
				.getPrimerRespondienteDAO();

		userDAO = DAOFactoryInstantiator.instantiateDaoFactory(
				HibernateTPHDAOFactory.class, daoClassName, params)
				.getUserDAO();

		patientService = new PatientService(daoClassName, params);
		encounterService = new EncounterService(daoClassName, params);
		eventoService = new EventoService(daoClassName, params);

	}

	public List<Lesionado> obtenerLesionados(Evento evento) {
		return lesionadoDAO.getLesionados(evento);
	}
	public List<Lesionado> getLesionadosEvent(Evento evento, Integer userId,
			Integer personId)
	{
		return lesionadoDAO.getLesionadosEvent(evento, userId, personId);
	}
	public List<Lesionado> obtenerLesionados(Evento evento, Integer userId) {
		User user = userDAO.getUser(userId);
		return lesionadoDAO.getLesionados(evento, userId, user.getPersonId());
	}
	public List<Lesionado> getLesionadosEncounter(Integer encounterId)
	{
		return lesionadoDAO.getLesionadosEncounter(encounterId);
	}
	public List<Lesionado> obtenerLesionadosSolicitudTeleasistencia(
			Evento evento) {
		return lesionadoDAO.getLesionadosSolicitudTeleasistencia(evento);
	}

	public Lesionado obtenerLesionado(Integer lesionadoId) {
		return lesionadoDAO.getLesionado(lesionadoId);
	}

	public Lesionado guardarLesionado(Lesionado lesionado) {
		return lesionadoDAO.save(lesionado);
	}

	public Lesionado actualizarLesionado(Lesionado lesionado) {
		return lesionadoDAO.update(lesionado);
	}

	public Lesionado crearNuevoLesionado(Integer eventoId, Integer creator) {

		Patient paciente = patientService.crearPacienteVacio(creator);

		Encounter encuentro = encounterService.createEmergencyEncounter(
				paciente, null, null, creator);

		Evento evento = eventoService.obtenerEvento(eventoId);

		Lesionado lesionado = lesionadoDAO.newLesionado();

		lesionado.setCreator(creator);
		lesionado.setEncuentro(encuentro);
		lesionado.setEvento(evento);

		return lesionadoDAO.save(lesionado);
	}

	public List<PrimerRespondiente> obtenerPrimerosRespondientes(
			Lesionado lesionado) {
		return primerRespondienteDAO.getAll(lesionado);
	}

	public PrimerRespondiente guardarPrimerRespondiente(Lesionado lesionado,
			Concept concept, Integer creator) {

		PrimerRespondiente primerRespondiente = new PrimerRespondiente();

		primerRespondiente.setCreator(creator);
		primerRespondiente.setLesionado(lesionado);
		primerRespondiente.setPrimerRespondiente(concept);

		return primerRespondienteDAO.insert(primerRespondiente);

	}

	public Boolean existePrimerRespondiente(Lesionado lesionado,
			Integer primerRespondienteConcept) {
		return primerRespondienteDAO.get(lesionado, primerRespondienteConcept) != null;
	}

	public List<Lesionado> obtenerLesionadosPorIdentificacion(
			String identificacion, Integer tipo) {
		return lesionadoDAO
				.getLesionadosPorIdentificacion(identificacion, tipo);
	}

	public List<Lesionado> obtenerLesionadosPorResponsable(String registro) {
		return lesionadoDAO.getLesionadosPorRegistro(registro);
	}

	public List<Integer> getConceptosLesiones() {

		ConceptsCode concepts = new ConceptsCode();
		List<Integer> lista = new ArrayList<Integer>();

		lista.add(concepts.cLesionAbrasion());
		lista.add(concepts.cLesionAmputacion());
		lista.add(concepts.cLesionAplastamiento());
		lista.add(concepts.cLesionAvulsion());
		lista.add(concepts.cLesionContusion());
		lista.add(concepts.cLesionDolor());
		lista.add(concepts.cLesionEsguince());
		lista.add(concepts.cLesionFracturaAbierta());
		lista.add(concepts.cLesionFracturaCerrada());
		lista.add(concepts.cLesionHematoma());
		lista.add(concepts.cLesionHemorragia());
		lista.add(concepts.cLesionHerida());
		lista.add(concepts.cLesionHeridaArmaBlanca());
		lista.add(concepts.cLesionHeridaArmaFuego());
		lista.add(concepts.cLesionLaceracion());
		lista.add(concepts.cLesionMordida());
		lista.add(concepts.cLesionPicadura());
		lista.add(concepts.cLesionPuncion());
		lista.add(concepts.cLesionQuemadura());
		lista.add(concepts.cLesionTraumaCerrado());
		lista.add(concepts.cLesionTraumaPenetrante());

		return lista;
	}
}
